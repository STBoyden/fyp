// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums/cmd/goenums
// using the command:
// goenums filename.go

package state

import (
	"bytes"
	"fmt"
	"strconv"
	"strings"
)

type Message struct {
	message
}

type messageContainer struct {
	MESSAGE_NONE Message
	HELLO        Message
	FROM_CLIENT  Message
	FROM_SERVER  Message
}

var Messages = messageContainer{
	MESSAGE_NONE: Message{
		message: message_none,
	},
	HELLO: Message{
		message: hello,
	},
	FROM_CLIENT: Message{
		message: from_client,
	},
	FROM_SERVER: Message{
		message: from_server,
	},
}

func (c messageContainer) All() []Message {
	return []Message{
		c.MESSAGE_NONE,
		c.HELLO,
		c.FROM_CLIENT,
		c.FROM_SERVER,
	}
}

var invalidMessage = Message{}

func ParseMessage(a any) Message {
	switch v := a.(type) {
	case Message:
		return v
	case string:
		return stringToMessage(v)
	case fmt.Stringer:
		return stringToMessage(v.String())
	case int:
		return intToMessage(v)
	case int64:
		return intToMessage(int(v))
	case int32:
		return intToMessage(int(v))
	}
	return invalidMessage
}

func stringToMessage(s string) Message {
	lwr := strings.ToLower(s)
	switch lwr {
	case "message_none":
		return Messages.MESSAGE_NONE
	case "hello":
		return Messages.HELLO
	case "from_client":
		return Messages.FROM_CLIENT
	case "from_server":
		return Messages.FROM_SERVER
	}
	return invalidMessage
}

func intToMessage(i int) Message {
	if i < 0 || i >= len(Messages.All()) {
		return invalidMessage
	}
	return Messages.All()[i]
}

func ExhaustiveMessages(f func(Message)) {
	for _, p := range Messages.All() {
		f(p)
	}
}

var validMessages = map[Message]bool{
	Messages.MESSAGE_NONE: true,
	Messages.HELLO:        true,
	Messages.FROM_CLIENT:  true,
	Messages.FROM_SERVER:  true,
}

func (p Message) IsValid() bool {
	return validMessages[p]
}

func (p Message) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Message) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	*p = ParseMessage(string(b))
	return nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[message_none-0]
	_ = x[hello-1]
	_ = x[from_client-2]
	_ = x[from_server-3]
}

const _message_name = "message_nonehellofrom_clientfrom_server"

var _message_index = [...]uint16{0, 12, 17, 28, 39}

func (i message) String() string {
	if i < 0 || i >= message(len(_message_index)-1) {
		return "message(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _message_name[_message_index[i]:_message_index[i+1]]
}
