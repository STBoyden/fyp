// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums/cmd/goenums
// using the command:
// goenums filename.go

package tiles

import (
	"bytes"
	"fmt"
	"strconv"
	"strings"
)

type Types struct {
	types
}

type typesContainer struct {
	SPACE_TILE     Types
	GROUND_UL_TILE Types
	GROUND_UM_TILE Types
	GROUND_UR_TILE Types
	GROUND_ML_TILE Types
	GROUND_MM_TILE Types
	GROUND_MR_TILE Types
	GROUND_BL_TILE Types
	GROUND_BM_TILE Types
	GROUND_BR_TILE Types
	COIN_TILE      Types
	DIAMOND_TILE   Types
	HEART_TILE     Types
	SPIKE_TILE     Types
}

var Typeses = typesContainer{
	SPACE_TILE: Types{
		types: space_tile,
	},
	GROUND_UL_TILE: Types{
		types: ground_ul_tile,
	},
	GROUND_UM_TILE: Types{
		types: ground_um_tile,
	},
	GROUND_UR_TILE: Types{
		types: ground_ur_tile,
	},
	GROUND_ML_TILE: Types{
		types: ground_ml_tile,
	},
	GROUND_MM_TILE: Types{
		types: ground_mm_tile,
	},
	GROUND_MR_TILE: Types{
		types: ground_mr_tile,
	},
	GROUND_BL_TILE: Types{
		types: ground_bl_tile,
	},
	GROUND_BM_TILE: Types{
		types: ground_bm_tile,
	},
	GROUND_BR_TILE: Types{
		types: ground_br_tile,
	},
	COIN_TILE: Types{
		types: coin_tile,
	},
	DIAMOND_TILE: Types{
		types: diamond_tile,
	},
	HEART_TILE: Types{
		types: heart_tile,
	},
	SPIKE_TILE: Types{
		types: spike_tile,
	},
}

func (c typesContainer) All() []Types {
	return []Types{
		c.SPACE_TILE,
		c.GROUND_UL_TILE,
		c.GROUND_UM_TILE,
		c.GROUND_UR_TILE,
		c.GROUND_ML_TILE,
		c.GROUND_MM_TILE,
		c.GROUND_MR_TILE,
		c.GROUND_BL_TILE,
		c.GROUND_BM_TILE,
		c.GROUND_BR_TILE,
		c.COIN_TILE,
		c.DIAMOND_TILE,
		c.HEART_TILE,
		c.SPIKE_TILE,
	}
}

var invalidTypes = Types{}

func ParseTypes(a any) Types {
	switch v := a.(type) {
	case Types:
		return v
	case string:
		return stringToTypes(v)
	case fmt.Stringer:
		return stringToTypes(v.String())
	case int:
		return intToTypes(v)
	case int64:
		return intToTypes(int(v))
	case int32:
		return intToTypes(int(v))
	}
	return invalidTypes
}

func stringToTypes(s string) Types {
	lwr := strings.ToLower(s)
	switch lwr {
	case "space_tile":
		return Typeses.SPACE_TILE
	case "ground_ul_tile":
		return Typeses.GROUND_UL_TILE
	case "ground_um_tile":
		return Typeses.GROUND_UM_TILE
	case "ground_ur_tile":
		return Typeses.GROUND_UR_TILE
	case "ground_ml_tile":
		return Typeses.GROUND_ML_TILE
	case "ground_mm_tile":
		return Typeses.GROUND_MM_TILE
	case "ground_mr_tile":
		return Typeses.GROUND_MR_TILE
	case "ground_bl_tile":
		return Typeses.GROUND_BL_TILE
	case "ground_bm_tile":
		return Typeses.GROUND_BM_TILE
	case "ground_br_tile":
		return Typeses.GROUND_BR_TILE
	case "coin_tile":
		return Typeses.COIN_TILE
	case "diamond_tile":
		return Typeses.DIAMOND_TILE
	case "heart_tile":
		return Typeses.HEART_TILE
	case "spike_tile":
		return Typeses.SPIKE_TILE
	}
	return invalidTypes
}

func intToTypes(i int) Types {
	if i < 0 || i >= len(Typeses.All()) {
		return invalidTypes
	}
	return Typeses.All()[i]
}

func ExhaustiveTypess(f func(Types)) {
	for _, p := range Typeses.All() {
		f(p)
	}
}

var validTypeses = map[Types]bool{
	Typeses.SPACE_TILE:     true,
	Typeses.GROUND_UL_TILE: true,
	Typeses.GROUND_UM_TILE: true,
	Typeses.GROUND_UR_TILE: true,
	Typeses.GROUND_ML_TILE: true,
	Typeses.GROUND_MM_TILE: true,
	Typeses.GROUND_MR_TILE: true,
	Typeses.GROUND_BL_TILE: true,
	Typeses.GROUND_BM_TILE: true,
	Typeses.GROUND_BR_TILE: true,
	Typeses.COIN_TILE:      true,
	Typeses.DIAMOND_TILE:   true,
	Typeses.HEART_TILE:     true,
	Typeses.SPIKE_TILE:     true,
}

func (p Types) IsValid() bool {
	return validTypeses[p]
}

func (p Types) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Types) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	*p = ParseTypes(string(b))
	return nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[space_tile-0]
	_ = x[ground_ul_tile-1]
	_ = x[ground_um_tile-2]
	_ = x[ground_ur_tile-3]
	_ = x[ground_ml_tile-4]
	_ = x[ground_mm_tile-5]
	_ = x[ground_mr_tile-6]
	_ = x[ground_bl_tile-7]
	_ = x[ground_bm_tile-8]
	_ = x[ground_br_tile-9]
	_ = x[coin_tile-10]
	_ = x[diamond_tile-11]
	_ = x[heart_tile-12]
	_ = x[spike_tile-13]
}

const _types_name = "space_tileground_ul_tileground_um_tileground_ur_tileground_ml_tileground_mm_tileground_mr_tileground_bl_tileground_bm_tileground_br_tilecoin_tilediamond_tileheart_tilespike_tile"

var _types_index = [...]uint16{0, 10, 24, 38, 52, 66, 80, 94, 108, 122, 136, 145, 157, 167, 177}

func (i types) String() string {
	if i < 0 || i >= types(len(_types_index)-1) {
		return "types(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _types_name[_types_index[i]:_types_index[i+1]]
}
